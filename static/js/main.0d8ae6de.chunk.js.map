{"version":3,"sources":["components/singleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","alt","src","process","onClick","cardImgs","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleImgs","shuffledImages","sort","Math","random","map","id","useEffect","prevCards","resetTurn","setTimeout","prevTurns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAqBeA,EApBI,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAKjD,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAWF,EAAU,UAAY,GAAtC,UACE,qBAAKE,UAAU,QAAQC,IAAI,aAAaC,IAAMC,6BAAyBP,EAAKM,MAC5E,qBACEF,UAAU,OACVC,IAAI,YACJC,IAAMC,2CACNC,QAZY,WACbL,GAAUF,EAAaD,YCE1BS,EAAW,CACf,CAAE,IAAO,oBAAqBC,SAAS,GACvC,CAAE,IAAO,kBAAmBA,SAAS,GACrC,CAAE,IAAO,oBAAqBA,SAAS,GACvC,CAAE,IAAO,oBAAqBA,SAAS,GACvC,CAAE,IAAO,mBAAoBA,SAAS,GACtC,CAAE,IAAO,oBAAqBA,SAAS,IA4E1BC,MAzEf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,MAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOT,EAAP,KAAiBkB,EAAjB,KAEMC,EAAc,WAClB,IAAMC,EAAiB,UAAId,EAAaA,GACrCe,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAAC3B,GAAD,mBAAC,eAAeA,GAAhB,IAAsB4B,GAAIH,KAAKC,cAEtCR,EAAa,MACbE,EAAa,MACbN,EAASS,GACTP,EAAS,IAGLf,EAAe,SAACD,GACpBiB,EAAYG,EAAapB,GAAQkB,EAAalB,IAEhD6B,qBAAU,WACJZ,GAAaE,IACfE,GAAY,GACRJ,EAAUX,MAAQa,EAAUb,KAC9BQ,GAAS,SAACgB,GACR,OAAOA,EAAUH,KAAI,SAAC3B,GACpB,OAAIA,EAAKM,MAAQW,EAAUX,IAClB,2BAAKN,GAAZ,IAAkBU,SAAS,IAEpBV,QAIb+B,KAEAC,YAAW,kBAAMD,MAAa,QAGjC,CAACd,EAAWE,IAGf,IAAMY,EAAY,WAChBb,EAAa,MACbE,EAAa,MACbJ,GAAS,SAACiB,GAAD,OAAeA,EAAY,KACpCZ,GAAY,IAOd,OAHAQ,qBAAU,WACRP,MACC,IAED,sBAAKlB,UAAU,MAAf,UACE,+CACA,wBAAQI,QAASc,EAAjB,sBACA,qBAAKlB,UAAU,YAAf,SACGS,EAAMc,KAAI,SAAC3B,GAAD,OACT,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAcA,EACdC,QAASF,IAASiB,GAAajB,IAASmB,GAAanB,EAAKU,QAC1DP,SAAUA,GAJLH,EAAK4B,SAQhB,wCAAWb,SC5EjBmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0d8ae6de.chunk.js","sourcesContent":["import \"./singleCard.css\";\r\nconst SingleCard = ({ card, handleChoice, flipped, disabled }) => {\r\n  const handleClick = () => {\r\n    if (!disabled) handleChoice(card);\r\n  };\r\n \r\n  return (\r\n    <div className=\"card\">\r\n      <div className={flipped ? \"flipped\" : \"\"}>\r\n        <img className=\"front\" alt=\"front card\" src= {process.env.PUBLIC_URL + card.src} />\r\n        <img\r\n          className=\"back\"\r\n          alt=\"back card\"\r\n          src= {process.env.PUBLIC_URL+\"/img/cover.png\"}\r\n          onClick={handleClick}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleCard;\r\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport SingleCard from \"./components/singleCard\";\n\n\nconst cardImgs = [\n  { \"src\": \"/img/potion-1.png\", matched: false },\n  { \"src\": \"/img/ring-1.png\", matched: false },\n  { \"src\": \"/img/scroll-1.png\", matched: false },\n  { \"src\": \"/img/shield-1.png\", matched: false },\n  { \"src\": \"/img/sword-1.png\", matched: false },\n  { \"src\": \"/img/helmet-1.png\", matched: false },\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  const shuffleImgs = () => {\n    const shuffledImages = [...cardImgs, ...cardImgs]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }));\n\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledImages);\n    setTurns(0);\n  };\n\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        setCards((prevCards) => {\n          return prevCards.map((card) => {\n            if (card.src === choiceOne.src) {\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        setTimeout(() => resetTurn(), 500);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n\n  // reset choices & increase turn\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns((prevTurns) => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  // start new game automagically\n  useEffect(() => {\n    shuffleImgs();\n  }, []);\n  return (\n    <div className=\"App\">\n      <h1> Memory game </h1>\n      <button onClick={shuffleImgs}>New Game</button>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <SingleCard\n            key={card.id}\n            card={card}\n            handleChoice={handleChoice}\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\n            disabled={disabled}\n          />\n        ))}\n      </div>\n      <p>Turns: {turns}</p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}